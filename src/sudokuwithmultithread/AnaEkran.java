
package sudokuwithmultithread;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.concurrent.BrokenBarrierException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.filechooser.FileNameExtensionFilter;

public class AnaEkran extends javax.swing.JFrame{
    // these to variable will hold sudoku grid
    public int sudokuArray[][];
    public int originalArray[][];
    
    // our threads
    private Thread0 thread0;
    private Thread1 thread1;
    private Thread2 thread2;
    
    public AnaEkran() {
        initComponents();
        
        // initializing fields
        sudokuArray = new int[9][9];
        originalArray = new int[9][9];
        jButton1.setEnabled(false);
        jButton2.setVisible(false);
        jButton3.setVisible(false);
        jButton4.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator3 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        jLabel82 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sudoku Multi Thread");
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        jButton1.setText("Başlat");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel82.setText("Thread0:");

        jLabel83.setText("Thread1:");

        jLabel84.setText("Thread2:");

        jLabel85.setText("Bekliyor.");

        jLabel86.setText("Bekliyor.");

        jLabel87.setText("Bekliyor.");

        jButton2.setText("Göster");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Göster");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Göster");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jMenu1.setText("Dosya");

        jMenuItem1.setText("Aç");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel82)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel85)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel84)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel87)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel83)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel86)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel82)
                    .addComponent(jLabel85)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel83)
                    .addComponent(jLabel86)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel84)
                    .addComponent(jLabel87)
                    .addComponent(jButton4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // dosya seçiciyi yalnızca text dosyası seçmeye müsaade edecek şekilde açıyoruz
        JFileChooser dosyasec = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter(".txt", "txt", "text");
        dosyasec.setAcceptAllFileFilterUsed(false);
        dosyasec.setCurrentDirectory(new File(System.getProperty("user.home")));
        dosyasec.setFileFilter(filter);
        
        // pencereden dönen sonucu alıyoruz
        int result = dosyasec.showOpenDialog(jMenu1);
        
        // sonuç APPROVE_OPTION ise, bir dosya seçilmiş demektir
        if(result == JFileChooser.APPROVE_OPTION){
            // seçilen dosyayı alıyoruz
            File selectedFile = dosyasec.getSelectedFile();
            
            // BufferedReader nesnemizi oluşturuyoruz
            BufferedReader in;
            
            // dosyanın içerisini okumaya başlayacağız
            try {
                in = new BufferedReader(new FileReader(selectedFile));
                
                // satır satır okuyacağız, her satır line değişkenine gidecek
                String line;
                
                // lineIndex değerini satır okudukça bir arttıracağız, işimize yarayacak
                int lineIndex = 0;
                while((line = in.readLine()) != null){
                    
                    // okuduğumuz satırın içindeki karakterleri char dizisine dönüştürüyoruz
                    char[] sayilar = line.toCharArray();
                    int[] numbersNumeric = new int[9];
                    
                    // char dizisinin içerisini gezip *'ları 0'a çevirerek tüm karakterleri sayıya dönüştürüyoruz
                    for(int i = 0; i < 9; i++){
                        if(sayilar[i] != '*'){
                            numbersNumeric[i] = sayilar[i] - '0';
                        } else{
                            numbersNumeric[i] = 0;
                        }
                    }
                    
                    // ve elde ettiğimiz diziyi grid içerisine yerleştiriyoruz
                    for(int i = 0; i < 9; i++){
                        sudokuArray[lineIndex][i] = numbersNumeric[i];
                        originalArray[lineIndex][i] = numbersNumeric[i];
                    }
                    lineIndex++;
                }
                
                in.close();
                jButton1.setEnabled(true);
            } catch (Exception ex) {
                Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else{
            
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // üst üste başla butonuna tıklandığında
        // bir problem çıkmaması için, her tıklama sonrası
        // orjinal ve çözülmemiş sudoku gridindeki verileri
        // çözülecek grid içerisine geri kopyalıyoruz
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                sudokuArray[i][j] = originalArray[i][j];
            }
        }
        
        // threadCaller() metodu tüm threadlerimizi çağıracak
        try {
            threadCaller(sudokuArray);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BrokenBarrierException | InterruptedException ex) {
            Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // thread detaylarının gösterildiği formun nesnesini oluşturuyoruz
        ThreadDetailsFrame detailsFrame = null;
        try {
            // içerisine parametre olarak dosya ismini gönderiyoruz
            detailsFrame = new ThreadDetailsFrame("thread0.txt", originalArray);
        } catch (IOException ex) {
            Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        detailsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        detailsFrame.setTitle("Thread0 Adımlar");
        detailsFrame.setResizable(false);
        detailsFrame.pack();
        detailsFrame.setLocationRelativeTo(null);
        detailsFrame.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        ThreadDetailsFrame detailsFrame = null;
        try {
            detailsFrame = new ThreadDetailsFrame("thread1.txt", originalArray);
        } catch (IOException ex) {
            Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        detailsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        detailsFrame.setTitle("Thread1 Adımlar");
        detailsFrame.setResizable(false);
        detailsFrame.pack();
        detailsFrame.setLocationRelativeTo(null);
        detailsFrame.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        ThreadDetailsFrame detailsFrame = null;
        try {
            detailsFrame = new ThreadDetailsFrame("thread2.txt", originalArray);
        } catch (IOException ex) {
            Logger.getLogger(AnaEkran.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        detailsFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        detailsFrame.setTitle("Thread2 Adımlar");
        detailsFrame.setResizable(false);
        detailsFrame.pack();
        detailsFrame.setLocationRelativeTo(null);
        detailsFrame.setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    public void threadCaller(int dizi[][]) throws FileNotFoundException, UnsupportedEncodingException, IOException, BrokenBarrierException, InterruptedException{
        // her thread'e çözülecek sudokuyu dizi olarak vereceğiz
        // fakat aynı diziyi gödereceğimiz için
        // üç thread de aynı dizi üzerinde işlem yapıyor
        // o yüzden dizilerin kopyalarını oluşturuyoruz
        int [][] dizi1 = new int[9][9];
        int [][] dizi2 = new int[9][9];
        
        for(int i = 0; i < 9; i++){
            for(int j = 0; j < 9; j++){
                dizi1[i][j] = dizi[i][j];
                dizi2[i][j] = dizi[i][j];
            }
        }
        
        // ThreadManager sınıfını ArrayList'ten extend ederek oluşturduk
        // içerisindeki stopThreads() metodu sayesinde eklenen tüm
        // threadleri sonlandırabiliyor olacağız
        ThreadManager<Thread> t = new ThreadManager<>();
        
        // threadleri isim, dizi, ve ekleneceği treadManager obje bilgileriyle oluşturuyoruz
        thread0 = new Thread0("0", dizi, t);
        thread1 = new Thread1("1", dizi1, t);
        thread2 = new Thread2("2", dizi2, t);
        
        // threadleri manager'e ekliyoruz
        t.add(thread0);
        t.add(thread1);
        t.add(thread2);
        
        // threadleri başlatmadan önce saat bilgisini alıyoruz
        long start = System.currentTimeMillis();
        
        // threadler başlıyor
        thread0.start();
        thread1.start();
        thread2.start();
        
        // saat bilgisinin çalışabilmesi için onları join ediyoruz
        thread0.join();
        thread1.join();
        thread2.join();
        
        // bitiş için saat bilgisini alıp geçen süreyi hesaplıyoruz
        long stop = System.currentTimeMillis();
        long time = stop - start;
        
        // forma süreyi basıyoruz
        printTime(time);
        
        // bu metod threadleri izlemeye yarıyor
        monitorThread(thread0);
        monitorThread(thread1);
        monitorThread(thread2);
    }
    
    public void printTime(long time){
     
        if(thread0.getResult().equals("En hızlı")){
            jLabel1.setText(time + " milisaniye");
        } else{
            jLabel1.setText("");
        }
        
        if(thread1.getResult().equals("En hızlı")){
            jLabel2.setText(time + " milisaniye");
        } else{
            jLabel2.setText("");
        }
        
        if(thread2.getResult().equals("En hızlı")){
            jLabel3.setText(time + " milisaniye");
        } else{
            jLabel3.setText("");
        }
    }
    
    public void monitorThread(Thread monitorMe) {
        // threadler çalıştığı sürece bir şey yapmayacağız
        while(monitorMe.isAlive()){

        }
        
        // program buraya düştüğünde threadin çalışması bitmiş olacak
        // thread bilgilerini alıp kaybeden mi kazanan mı olduğunu ekrana basıyoruz
        if(monitorMe == thread0){
            jButton2.setVisible(true);
            String result = thread0.getResult();
            if(result.isEmpty()) result = "Daha yavaş";
            jLabel85.setText(result);
        } else if(monitorMe == thread1){
            jButton3.setVisible(true);
            String result = thread1.getResult();
            if(result.isEmpty()) result = "Daha yavaş";
            jLabel86.setText(result);
        } else if(monitorMe == thread2){
            jButton4.setVisible(true);
            String result = thread2.getResult();
            if(result.isEmpty()) result = "Daha yavaş";
            jLabel87.setText(result);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
       
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AnaEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AnaEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AnaEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AnaEkran.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AnaEkran main = new AnaEkran();
                main.setVisible(true);
                main.setLocationRelativeTo(null);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables

}
